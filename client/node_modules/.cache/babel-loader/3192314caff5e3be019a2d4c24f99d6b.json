{"remainingRequest":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/babel-loader/lib/index.js!/goinfre/pntsunts/Desktop/matcha/client/node_modules/eslint-loader/index.js??ref--13-0!/goinfre/pntsunts/Desktop/matcha/client/src/services/GeneralService.js","dependencies":[{"path":"/goinfre/pntsunts/Desktop/matcha/client/src/services/GeneralService.js","mtime":1593089863756},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9nb2luZnJlL3BudHN1bnRzL0Rlc2t0b3AvbWF0Y2hhL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2dvaW5mcmUvcG50c3VudHMvRGVza3RvcC9tYXRjaGEvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2dvaW5mcmUvcG50c3VudHMvRGVza3RvcC9tYXRjaGEvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBDb25zdGFudCBmcm9tICcuL2NvbnN0YW50cyc7Cgp2YXIgR2VuZXJhbFNlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEdlbmVyYWxTZXJ2aWNlKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdlbmVyYWxTZXJ2aWNlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhHZW5lcmFsU2VydmljZSwgbnVsbCwgW3sKICAgIGtleTogIlVwbG9hZFBob3RvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBVcGxvYWRQaG90byhpbWFnZSkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICB2YXIgcmVzLCBkYXRhOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KENvbnN0YW50LlVSTCArICd1cGxvYWQnLCBpbWFnZSk7CgogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7CiAgICAgICAgICAgICAgICAgIHJlamVjdChkYXRhKTsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA5OwogICAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgICAgICBhbGVydChfY29udGV4dC50MC5tZXNzYWdlKTsKCiAgICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgOV1dKTsKICAgICAgICB9KSk7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MikgewogICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9KCkpOwogICAgfQogIH0sIHsKICAgIGtleTogIlBvc3RFeGVjdXRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIFBvc3RFeGVjdXRpb24ocm91dGVyLCBwYXJhbXMpIHsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICB2YXIgcmVzOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KENvbnN0YW50LlVSTCArIHJvdXRlciwgcGFyYW1zKTsKCiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy5kYXRhKTsKICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcy5kYXRhKTsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDg7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQyLnQwKTsKCiAgICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1swLCA4XV0pOwogICAgICAgIH0pKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDMsIF94NCkgewogICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfSgpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJHZXRFeGVjdXRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIEdldEV4ZWN1dGlvbihyb3V0ZXIsIHBhcmFtKSB7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgdmFyIHJlczsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMDsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KENvbnN0YW50LlVSTCArIHJvdXRlciArIHBhcmFtKTsKCiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy5kYXRhKTsKICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcy5kYXRhKTsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDg7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgwKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2NvbnRleHQzLnQwKTsKCiAgICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1swLCA4XV0pOwogICAgICAgIH0pKTsKCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDUsIF94NikgewogICAgICAgICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfSgpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBHZW5lcmFsU2VydmljZTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgR2VuZXJhbFNlcnZpY2U7"},{"version":3,"sources":["/goinfre/pntsunts/Desktop/matcha/client/src/services/GeneralService.js"],"names":["axios","Constant","GeneralService","image","Promise","resolve","reject","post","URL","res","data","alert","message","router","params","console","log","param","get"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,aAArB;;IAEMC,c;;;;;;;gCACgBC,K,EAAO;AACzB,aAAO,IAAIC,OAAJ;AAAA,2EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEGN,KAAK,CAACO,IAAN,CAAWN,QAAQ,CAACO,GAAT,GAAe,QAA1B,EAAoCL,KAApC,CAFH;;AAAA;AAETM,kBAAAA,GAFS;AAGTC,kBAAAA,IAHS,GAGFD,GAAG,CAACC,IAHF;AAIfL,kBAAAA,OAAO,CACLK,IADK,CAAP;AAGAJ,kBAAAA,MAAM,CACJI,IADI,CAAN;AAPe;AAAA;;AAAA;AAAA;AAAA;AAWfC,kBAAAA,KAAK,CAAC,YAAMC,OAAP,CAAL;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AAeD;;;kCAEqBC,M,EAAQC,M,EAAQ;AACpC,aAAO,IAAIV,OAAJ;AAAA,4EAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEGN,KAAK,CAACO,IAAN,CAAWN,QAAQ,CAACO,GAAT,GAAeK,MAA1B,EAAkCC,MAAlC,CAFH;;AAAA;AAETL,kBAAAA,GAFS;AAGfJ,kBAAAA,OAAO,CAACI,GAAG,CAACC,IAAL,CAAP;AACAJ,kBAAAA,MAAM,CAACG,GAAG,CAACC,IAAL,CAAN;AAJe;AAAA;;AAAA;AAAA;AAAA;AAMfK,kBAAAA,OAAO,CAACC,GAAR;;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AASD;;;iCAEoBH,M,EAAQI,K,EAAO;AAClC,aAAO,IAAIb,OAAJ;AAAA,4EAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEGN,KAAK,CAACkB,GAAN,CAAUjB,QAAQ,CAACO,GAAT,GAAeK,MAAf,GAAwBI,KAAlC,CAFH;;AAAA;AAETR,kBAAAA,GAFS;AAGfJ,kBAAAA,OAAO,CAACI,GAAG,CAACC,IAAL,CAAP;AACAJ,kBAAAA,MAAM,CAACG,GAAG,CAACC,IAAL,CAAN;AAJe;AAAA;;AAAA;AAAA;AAAA;AAMfK,kBAAAA,OAAO,CAACC,GAAR;;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AASD;;;;;;AAEH,eAAed,cAAf","sourcesContent":["import axios from 'axios'\nimport Constant from './constants'\n\nclass GeneralService {\n  static UploadPhoto (image) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.post(Constant.URL + 'upload', image)\n        const data = res.data\n        resolve(\n          data\n        )\n        reject(\n          data\n        )\n      } catch (error) {\n        alert(error.message)\n      }\n    }\n    )\n  }\n\n  static PostExecution (router, params) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.post(Constant.URL + router, params)\n        resolve(res.data)\n        reject(res.data)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  }\n\n  static GetExecution (router, param) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.get(Constant.URL + router + param)\n        resolve(res.data)\n        reject(res.data)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  }\n}\nexport default GeneralService\n"]}]}