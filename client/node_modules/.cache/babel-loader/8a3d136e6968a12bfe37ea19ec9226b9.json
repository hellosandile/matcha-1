{"remainingRequest":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/babel-loader/lib/index.js!/goinfre/pntsunts/Desktop/matcha/client/node_modules/eslint-loader/index.js??ref--13-0!/goinfre/pntsunts/Desktop/matcha/client/src/services/GeneralService.js","dependencies":[{"path":"/goinfre/pntsunts/Desktop/matcha/client/src/services/GeneralService.js","mtime":1593785768051},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/goinfre/pntsunts/Desktop/matcha/client/src/services/GeneralService.js"],"names":["axios","Constant","GeneralService","image","Promise","resolve","reject","post","URL","res","data","alert","message","router","imageData","params","console","log","param","get"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport Constant from './constants'\n// import { constants } from 'os'\n\nclass GeneralService {\n  static UploadPhoto (image) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.post(Constant.URL + 'upload', image)\n        const data = res.data\n        resolve(\n          data\n        )\n        reject(\n          data\n        )\n      } catch (error) {\n        alert(error.message)\n      }\n    }\n    )\n  }\n\n  static PostUploadImageExecution (router, imageData) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.post(Constant.URL + router, imageData)\n        const data = res.data\n        resolve(\n          data\n        )\n        reject(\n          data\n        )\n      } catch (error) {\n        alert(error.message)\n      }\n    }\n    )\n  }\n\n  static PostExecution (router, params) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        console.log(Constant.URL)\n        console.log(router)\n        console.log(params)\n        const res = await axios.post(Constant.URL + router, params)\n        resolve(res.data)\n        reject(res.data)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  }\n\n  static GetExecution (router, param) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.get(Constant.URL + router + param)\n        resolve(res.data)\n        reject(res.data)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  }\n\n  static getReturnArrayExecution (router, param) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.post(Constant.URL + router, param)\n        resolve(res)\n        reject(res)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  }\n}\nexport default GeneralService\n"]}]}