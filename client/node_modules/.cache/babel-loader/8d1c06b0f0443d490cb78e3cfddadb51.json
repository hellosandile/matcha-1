{"remainingRequest":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/babel-loader/lib/index.js!/goinfre/pntsunts/Desktop/matcha/client/node_modules/eslint-loader/index.js??ref--13-0!/goinfre/pntsunts/Desktop/matcha/client/src/services/SignupService.js","dependencies":[{"path":"/goinfre/pntsunts/Desktop/matcha/client/src/services/SignupService.js","mtime":1593410671236},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/goinfre/pntsunts/Desktop/matcha/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9nb2luZnJlL3BudHN1bnRzL0Rlc2t0b3AvbWF0Y2hhL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9nb2luZnJlL3BudHN1bnRzL0Rlc2t0b3AvbWF0Y2hhL2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2dvaW5mcmUvcG50c3VudHMvRGVza3RvcC9tYXRjaGEvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2dvaW5mcmUvcG50c3VudHMvRGVza3RvcC9tYXRjaGEvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBDb25zdGFudCBmcm9tICcuL2NvbnN0YW50cyc7CmltcG9ydCBHZW5lcmFsU2VydmljZSBmcm9tICcuL0dlbmVyYWxTZXJ2aWNlJzsKdmFyIHVybCA9ICdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXBpL3Bvc3RzLyc7Cgp2YXIgU2lnbnVwU2VydmljZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gU2lnbnVwU2VydmljZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaWdudXBTZXJ2aWNlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhTaWdudXBTZXJ2aWNlLCBudWxsLCBbewogICAga2V5OiAiZ2V0VXNlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVzZXJzKCkgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICB2YXIgcmVzLCBkYXRhOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQodXJsKTsKCiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAgIGRhdGEgPSByZXMuZGF0YTsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhLm1hcChmdW5jdGlvbiAocG9zdCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBvc3QpLCB7fSwgewogICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShwb3N0LmNyZWF0ZWRBdCkKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICAgIHJlamVjdChfY29udGV4dC50MCk7CgogICAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDhdXSk7CiAgICAgICAgfSkpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94LCBfeDIpIHsKICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfSgpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWdpc3RlclVzZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyVXNlcihnZW5kZXIsIGZpcnN0bmFtZSwgbGFzdG5hbWUsIHVzZXJuYW1lLCBlbWFpbCwgZGF0ZSwgcGFzcywgY29uZmlybSkgewogICAgICByZXR1cm4gR2VuZXJhbFNlcnZpY2UuUG9zdEV4ZWN1dGlvbihDb25zdGFudC5SZWdpc3RlclVzZXIsIHsKICAgICAgICBnZW5kZXI6IGdlbmRlciwKICAgICAgICBmaXJzdG5hbWU6IGZpcnN0bmFtZSwKICAgICAgICBsYXN0bmFtZTogbGFzdG5hbWUsCiAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLAogICAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgICBkYXRlOiBkYXRlLAogICAgICAgIHBhc3M6IHBhc3MsCiAgICAgICAgY29uZmlybTogY29uZmlybQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZWxldGVVc2VyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVVc2VyKGlkKSB7CiAgICAgIHJldHVybiBheGlvcy5kZWxldGUoIiIuY29uY2F0KHVybCkuY29uY2F0KGlkKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2lnbnVwU2VydmljZTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgU2lnbnVwU2VydmljZTs="},{"version":3,"sources":["/goinfre/pntsunts/Desktop/matcha/client/src/services/SignupService.js"],"names":["axios","Constant","GeneralService","url","SignupService","Promise","resolve","reject","get","res","data","map","post","createdAt","Date","gender","firstname","lastname","username","email","date","pass","confirm","PostExecution","RegisterUser","id","delete"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,IAAMC,GAAG,GAAG,kCAAZ;;IACMC,a;;;;;;;+BACe;AACjB,aAAO,IAAIC,OAAJ;AAAA,2EAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEGP,KAAK,CAACQ,GAAN,CAAUL,GAAV,CAFH;;AAAA;AAETM,kBAAAA,GAFS;AAGTC,kBAAAA,IAHS,GAGFD,GAAG,CAACC,IAHF;AAIfJ,kBAAAA,OAAO,CACLI,IAAI,CAACC,GAAL,CAAS,UAAAC,IAAI;AAAA,2DACRA,IADQ;AAEXC,sBAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASF,IAAI,CAACC,SAAd;AAFA;AAAA,mBAAb,CADK,CAAP;AAJe;AAAA;;AAAA;AAAA;AAAA;AAYfN,kBAAAA,MAAM,aAAN;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AAgBD;;;iCAEoBQ,M,EAAQC,S,EAAWC,Q,EAAUC,Q,EAAUC,K,EAAOC,I,EAAMC,I,EAAMC,O,EAAS;AACtF,aAAOpB,cAAc,CAACqB,aAAf,CAA6BtB,QAAQ,CAACuB,YAAtC,EAAoD;AAAET,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,SAAS,EAATA,SAAV;AAAqBC,QAAAA,QAAQ,EAARA,QAArB;AAA+BC,QAAAA,QAAQ,EAARA,QAA/B;AAAyCC,QAAAA,KAAK,EAALA,KAAzC;AAAgDC,QAAAA,IAAI,EAAJA,IAAhD;AAAsDC,QAAAA,IAAI,EAAJA,IAAtD;AAA4DC,QAAAA,OAAO,EAAPA;AAA5D,OAApD,CAAP;AACD;;;+BAEkBG,E,EAAI;AACrB,aAAOzB,KAAK,CAAC0B,MAAN,WAAgBvB,GAAhB,SAAsBsB,EAAtB,EAAP;AACD;;;;;;AAEH,eAAerB,aAAf","sourcesContent":["import axios from 'axios'\nimport Constant from './constants'\nimport GeneralService from './GeneralService'\n\nconst url = 'http://localhost:5000/api/posts/'\nclass SignupService {\n  static getUsers () {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const res = await axios.get(url)\n        const data = res.data\n        resolve(\n          data.map(post => ({\n            ...post,\n            createdAt: new Date(post.createdAt)\n          })\n          )\n        )\n      } catch (error) {\n        reject(error)\n      }\n    }\n    )\n  }\n\n  static registerUser (gender, firstname, lastname, username, email, date, pass, confirm) {\n    return GeneralService.PostExecution(Constant.RegisterUser, { gender, firstname, lastname, username, email, date, pass, confirm })\n  }\n\n  static deleteUser (id) {\n    return axios.delete(`${url}${id}`)\n  }\n}\nexport default SignupService\n"]}]}